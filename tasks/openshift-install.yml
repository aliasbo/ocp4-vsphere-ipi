---
- name: Is openshift-install already running?
  command: pgrep -a -f 'openshift-install create cluster'
  register: r_pgrep
  ignore_errors: true

- name: Running openshift-install create cluster --dir={{ openshift_cluster_installation_dir }}
  command: openshift-install create cluster --dir={{ openshift_cluster_installation_dir }}
  async: "{{ 2 * 60 * 60 }}"
  poll: 0
  register: r_openshift_install
  when: r_pgrep is failed

- name: Wait for the metadata.json file 
  wait_for:
    path: "{{ openshift_cluster_installation_dir }}/metadata.json"

- name: Wait for the bootstrap creation message in the install log
  wait_for:
    path: "{{ openshift_cluster_installation_dir }}/.openshift_install.log"
    search_regex: '^.*bootstrap.*:\sCreation\scomplete'
    delay: 10
    sleep: 2
    timeout: 900

- name: Getting the name of the bootstrap VM using the InfraID
  set_fact:
    bootstrap_name: "{{ lookup('file','{{ openshift_cluster_installation_dir }}/metadata.json') | from_json | json_query('infraID') }}-bootstrap"

- name: Confirm the VM {{ bootstrap_name }} exists
  community.vmware.vmware_vm_info:
    vm_type: vm
  register: r_vm_info
  until: r_vm_info.virtual_machines | json_query(query)
  retries: 12
  delay: 10
  vars:
    query: "[?guest_name=='{{ bootstrap_name }}']"

- name: Wait for port 22 in {{ api_ip }}
  wait_for:
    port: 22
    host: "{{ api_ip }}"
    delay: 10

- name: Get the IP of {{ bootstrap_name }}
  community.vmware.vmware_guest_tools_wait:
    name: "{{ bootstrap_name }}"
  register: r_vm_guest

- name: Set the bootstrap_ip to {{ r_vm_guest.instance.ipv4 }}
  set_fact:
    bootstrap_ip: "{{ r_vm_guest.instance.ipv4 }}"

#  The below tasks are intended to fix a bug related to
#- a NM dispatcher that updates the resolv.conf
#- to add localhost for self-resolution like api-int
#  The bug is fixed starting on v4.8
#- so these should be refactored or removed
- name: Fix NM dispatcher on 4.6 and 4.7
  block:
  - name: Fix resolv.conf in {{ bootstrap_ip }}
    shell: |
      ssh -tt -i {{ ssh_pri_key }} -oStrictHostKeyChecking=off core@{{ bootstrap_ip }} '
      if ! /bin/grep "nameserver 127.0.0.1" /etc/resolv.conf >/dev/null
      then
        sudo sed -i "/^# Generated by/a nameserver 127.0.0.1" /etc/resolv.conf
      fi
      '
    args:
      executable: /bin/bash
    ignore_errors: true

  - name: Fix nm_dispatcher in {{ bootstrap_ip }}
    shell: |
      ssh -tt -i {{ ssh_pri_key }} core@{{ bootstrap_ip }} '
      sudo sed -i "/sed/s/by\.\*\$/by/" /etc/NetworkManager/dispatcher.d/30-local-dns-prepender
      '
    args:
      executable: /bin/bash
    ignore_errors: true
  when: (openshift_version.split(".")[1] | int) < 9

- name: For Single Master Cluster
  block:
  - name: Wait for the API up message in the install log
    wait_for:
      path: "{{ openshift_cluster_installation_dir }}/.openshift_install.log"
      search_regex: 'API\s+.*\s+up'
      delay: 10
      sleep: 2
      timeout: 900

  - name: Wait for the API in {{ api_ip }}
    wait_for:
      port: 6443
      host: "{{ api_ip }}"
      delay: 10

  - name: Wait for the etcd cluster object
    shell: oc --kubeconfig={{ openshift_cluster_installation_dir }}/auth/kubeconfig get etcd cluster
    register: result
    until: result.rc == 0
    retries: 5
    delay: 10

  - name: Patch the etcd operator
    k8s:
      kubeconfig: "{{ openshift_cluster_installation_dir }}/auth/kubeconfig"
      merge_type: merge
      definition:
        apiVersion: operator.openshift.io/v1
        kind: Etcd
        metadata:
          name: cluster
        spec:
          managementState: Managed
          unsupportedConfigOverrides:
            useUnsupportedUnsafeNonHANonProductionUnstableEtcd: true

  - name: Wait for the authentication cluster object
    shell: oc --kubeconfig={{ openshift_cluster_installation_dir }}/auth/kubeconfig get authentication cluster
    register: result
    until: result.rc == 0
    retries: 5
    delay: 10

  - name: Patch the authentication operator
    k8s:
      kubeconfig: "{{ openshift_cluster_installation_dir }}/auth/kubeconfig"
      merge_type: merge
      definition:
        apiVersion: operator.openshift.io/v1
        kind: Authentication
        metadata:
          name: cluster
        spec:
          managementState: Managed
          unsupportedConfigOverrides:
            useUnsupportedUnsafeNonHANonProductionUnstableOAuthServer: true
  when: single_master

- name: For close inspection of the bootstrap process run
  debug:
    msg: "ssh -i {{ ssh_pri_key }} core@{{ bootstrap_ip }} 'journalctl -b -f -u release-image.service -u bootkube.service'"

- name: Wait until cluster bootstrapping is complete
  command: |
    openshift-install wait-for bootstrap-complete --dir={{ openshift_cluster_installation_dir }} --log-level=DEBUG
  async: "{{ 2 * 60 * 60 }}"
  poll: 15 

- name: Run the following to watch the progress of the operators
  debug:
    msg: "oc --kubeconfig={{ openshift_cluster_installation_dir }}/auth/kubeconfig get co"

- name: Wait until the cluster is ready
  command: |
    openshift-install wait-for install-complete --dir={{ openshift_cluster_installation_dir }}
  async: "{{ 2 * 60 * 60 }}"
  poll: 15 

- name: Gzip Install log
  archive:
    path: "{{ openshift_cluster_installation_dir }}/.openshift_install.log"
    dest: "{{ openshift_cluster_dir }}/openshift_install.log.gz"
    format: gz

- name: Make sure .kube directory exists in home directory
  file:
    state: directory
    path: "{{ ansible_env.HOME }}/.kube"
    owner: "{{ ansible_env.USER }}"
    mode: 0775

- name: Copy the kubeconfig to {{ ansible_env.HOME }}/.kube/{{ cluster_name }}.config
  copy:
    src: "{{ openshift_cluster_installation_dir }}/auth/kubeconfig"
    dest: "{{ ansible_env.HOME }}/.kube/{{ cluster_name }}.config"

- name: Create OpenShift Bash completion file
  become: true
  shell: oc completion bash >/etc/bash_completion.d/openshift

